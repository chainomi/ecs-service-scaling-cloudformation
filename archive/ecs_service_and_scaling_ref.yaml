AWSTemplateFormatVersion: 2010-09-09
Description: The template used to create an ECS Service from the ECS Console.
Parameters:
  ECSClusterName:
    Type: String
    Default: test-vpc
  SecurityGroupName:
    Type: CommaDelimitedList
    Default: nginx-ecs-sg
  SubnetIDs:
    Type: CommaDelimitedList
    Default: >-
      subnet-b84c9299,subnet-e553b4d4,subnet-d6b261b0,subnet-a00dd1ff,subnet-0e86e543,subnet-3753c639
  VpcID:
    Type: String
    Default: vpc-ac8d62d1
  LoadBalancerName:
    Type: String
    Default: nginx-ecs-loadbalancer
Resources:
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: test-vpc
      CapacityProviderStrategy:
        - CapacityProvider: Infra-ECS-Cluster-test-vpc-f96b65a5-EC2CapacityProvider-wpaN7tPeilna
          Base: 0
          Weight: 1
      TaskDefinition: 'arn:aws:ecs:us-east-1:488144151286:task-definition/nginx-task:1'
      ServiceName: nginx
      SchedulingStrategy: REPLICA
      DesiredCount: 3
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          LoadBalancerName: !Ref 'AWS::NoValue'
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref SubnetIDs
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies:
        - Field: 'attribute:ecs.availability-zone'
          Type: spread
        - Field: instanceId
          Type: spread
      PlacementConstraints: []
      Tags:
        - Key: 'ecs:service:stackId'
          Value: !Ref 'AWS::StackId'
      EnableECSManagedTags: true
    DependsOn:
      - Listener
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: nginx security group for ecs
      GroupName: nginx-ecs-sg
      VpcId: vpc-ac8d62d1
      SecurityGroupIngress:
        - CidrIpv6: '::/0'
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Name: nginx-ecs-loadbalancer
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Ref SubnetIDs
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /
      Name: nginx-ecs-target-group
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VpcID
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  AutoScalingTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: '10'
      MinCapacity: '3'
      ResourceId: service/test-vpc/nginx
      RoleARN: >-
        arn:aws:iam::488144151286:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
    DependsOn:
      - ECSService
  AutoScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: nginx-scale-policy
      PolicyType: TargetTrackingScaling
      ResourceId: service/test-vpc/nginx
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        TargetValue: '65'
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization